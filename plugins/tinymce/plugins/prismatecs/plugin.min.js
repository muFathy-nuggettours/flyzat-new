tinymce.PluginManager.add("prismatecs", function(editor, url){
	editor.ui.registry.addButton("classes", {
		icon: "format-painter",
		tooltip: "Manage classes",
		onAction: function(){
			var element = editor.selection.getNode();
			if ($(element).prop("tagName")!="BODY"){
				var classes = editor.dom.getAttrib(element, "class");
				var modal = classShowModal(null, classes);
				modal.on("saved", function(event, parameters){
					var element = editor.selection.getNode();
					editor.dom.setAttrib(element, "class", parameters);
				});
			}
		},
		onSetup: function (button){
			var editorEventCallback = function (eventApi){
				var element = editor.selection.getNode();
				button.setDisabled($(element).prop("tagName")=="BODY");
			};
			editor.on("NodeChange", editorEventCallback);
			return function (button){
				editor.off("NodeChange", editorEventCallback);
			};
		}
	});

	editor.ui.registry.addButton("animate", {
		icon: "accessibility-check",
		tooltip: "Animations",
		onAction: function(){
			var element = editor.selection.getNode();
			var valid_elements = ["DIV","SPAN","P","A","IMG","TABLE","B"];
			if (valid_elements.includes($(element).prop("tagName"))){
				var animation = {
					"aos": editor.dom.getAttrib(element, "data-aos"),
					"aos-delay": editor.dom.getAttrib(element, "data-aos-delay"),
					"aos-duration": editor.dom.getAttrib(element, "data-aos-duration"),
					"aos-easing": editor.dom.getAttrib(element, "data-aos-easing"),
					"aos-mirror": editor.dom.getAttrib(element, "data-aos-mirror"),
					"aos-once": editor.dom.getAttrib(element, "data-aos-once"),
				};
				animation = (editor.dom.getAttrib(element, "data-aos") ? JSON.stringify(animation) : null);
				var modal = animationShowModal(null, animation);
				modal.on("saved", function(event, parameters){
					var element = editor.selection.getNode();
					if (parameters){
						var parameters_array = JSON.parse(parameters);
						var attributes = {};
						for (const key in parameters_array){
							editor.dom.setAttrib(element, "data-" + key, parameters_array[key]);
						}
					} else {
						editor.dom.setAttrib(element, "data-aos", null);
						editor.dom.setAttrib(element, "data-aos-delay", null);
						editor.dom.setAttrib(element, "data-aos-duration", null);
						editor.dom.setAttrib(element, "data-aos-easing", null);
						editor.dom.setAttrib(element, "data-aos-mirror", null);
						editor.dom.setAttrib(element, "data-aos-once", null);
					}
				});
			}
		},
		onSetup: function (button){
			var valid_elements = ["DIV","SPAN","P","A","IMG","TABLE","B"];
			var editorEventCallback = function (eventApi){
				var element = editor.selection.getNode();
				button.setDisabled(!valid_elements.includes($(element).prop("tagName")));
			};
			editor.on("NodeChange", editorEventCallback);
			return function (button){
				editor.off("NodeChange", editorEventCallback);
			};
		}
	});

	//Insert wrapper division
	editor.ui.registry.addButton("division", {
		icon: "browse",
		tooltip: "Insert division wrapper",
		onAction: function(){
            var text = editor.selection.getContent({
                "format": "html"
            });
            if (text && text.length > 0){
				editor.insertContent("<div>" + text + "</div>");
            } else {
				editor.insertContent("<div></div>");
			}
		}
	});
	
	//Insert draggable
	editor.ui.registry.addButton("draggable", {
		icon: "gallery",
		tooltip: "Initialize draggable (Beta)",
		onAction: function(button){
			var element = editor.selection.getNode();
			if ($(element).prop("tagName")!="BODY"){
				$(element).parent().css("position", "relative").css("height", "500px");
				$(element).draggable({
					stop: function(){
						var left = ( 100 * parseFloat($(element).position().left / parseFloat($(element).parent().width())) ) + "%";
						var top = ( 100 * parseFloat($(element).position().top / parseFloat($(element).parent().height())) ) + "%";
						var width = ( 100 * parseFloat($(element).width() / parseFloat($(element).parent().width())) ) + "%";
						editor.dom.setAttrib(element, "style", "position:absolute; top:" + top + "; left:" + left + "; width:" + width);
					}
				});
			}
		},
		onSetup: function (button){
			var editorEventCallback = function (eventApi){
				var element = editor.selection.getNode();
				button.setDisabled($(element).prop("tagName")=="BODY");
			};
			editor.on("NodeChange", editorEventCallback);
			return function (button){
				editor.off("NodeChange", editorEventCallback);
			};
		}
	});
	
	//Remove wrapper division or paragraph
	editor.ui.registry.addButton("removewrapper", {
		icon: "temporary-placeholder",
		tooltip: "Remove wrapper",
		onAction: function(button){
			var element = editor.selection.getNode();
			var parents = editor.dom.getParents(element);
			parents.forEach(function(item, index){
				if ($(item).prop("tagName")=="DIV" || $(item).prop("tagName")=="P" || $(item).prop("tagName")=="BLOCKQUOTE" || $(item).prop("tagName")=="PRE"){
					var content = $(item).html();
					$(item).contents().unwrap();
					button.setDisabled(true);
					return;
				}
			});
		},
		onSetup: function (button){
			var editorEventCallback = function (eventApi){
				var element = editor.selection.getNode();
				var parents = editor.dom.getParents(element);
				var disabled = true;
				parents.forEach(function(item, index){
				if ($(item).prop("tagName")=="DIV" || $(item).prop("tagName")=="P" || $(item).prop("tagName")=="BLOCKQUOTE" || $(item).prop("tagName")=="PRE"){
					disabled = false;
					return;
				}
				});			
				button.setDisabled(disabled);
			};
			editor.on("NodeChange", editorEventCallback);
			return function (button){
				editor.off("NodeChange", editorEventCallback);
			};
		}
	});
});